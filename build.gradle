plugins {
    id 'fabric-loom' version '1.0-SNAPSHOT'
    id 'maven-publish'
    id 'com.github.johnrengelman.shadow' version '7.1.2'
}

version = project.mod_version + "+" + project.minecraft_version
group = project.maven_group

repositories {
    maven { url 'https://maven.nucleoid.xyz' }
    maven { url 'https://oss.sonatype.org/content/repositories/snapshots' }
}

loom {
    accessWidenerPath = file("src/main/resources/grimoire.accesswidener")
}

dependencies {
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings loom.officialMojangMappings()
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

    [
            "fabric-command-api-v2"
    ].forEach {
        include(modImplementation(fabricApi.module(it, project.fabric_version)))
    }

    modImplementation include("xyz.nucleoid:server-translations-api:${project.server_translations_api_version}")
    modImplementation include("me.lucko:fabric-permissions-api:${project.fabric_permissions_api_version}")
    modImplementation include("eu.pb4:polymer-core:${project.polymer_version}")
}

shadowJar {
    minimize()
    classifier("shadow")
    configurations = [project.configurations.shadow]
    from sourceSets.main.output
}

remapJar {
    from zipTree(shadowJar.archiveFile) dependsOn shadowJar
}

processResources {
    inputs.property "version", project.version
    filteringCharset "UTF-8"

    filesMatching("fabric.mod.json") {
        def map = [
                "version": project.version,
                "loader_version": ">=${project.loader_version}"
        ]
        expand map
    }
}

def targetJavaVersion = 17

tasks.withType(JavaCompile).configureEach {
    it.options.encoding = "UTF-8"
    it.options.release.set(targetJavaVersion)
}

java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
    archivesBaseName = project.archives_base_name
    withSourcesJar()
}

jar {
    from("LICENSE") {
        rename { "${it}_${project.archivesBaseName}"}
    }
}
